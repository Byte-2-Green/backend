services:
  microservice:
    container_name: educational
    build: ./educational
    volumes:
      - ./educational/code:/usr/src/app
    networks:
      - msexample
    ports:
      - "${PORT}:${PORT}"
    working_dir: /usr/src/app
    command: bash -c "npm install && npm run dev"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - FRONTEND_URL=${FRONTEND_URL}

    depends_on:
      - mysql # Wait for MySQL to be ready before starting the microservice

  api-gateway:
    container_name: api-gateway
    build: ./api-gateway
    volumes:
      - ./api-gateway/code:/usr/src/app
    networks:
      - msexample
    ports:
      - "3010:3010"
    working_dir: /usr/src/app
    command: bash -c "npm install && npm run dev"
    environment:
      - PORT=3010
    depends_on:
      - microservice # Wait for the microservice to be ready before starting the API Gateway
      - mysql # Wait for MySQL to be ready before starting the API Gateway

  mysql:
    container_name: mysql-server
    image: mysql:8.0
    networks:
      - msexample
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=educational_db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=userpassword
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
      - ./educational/mysql/initdb:/docker-entrypoint-initdb.d  # Mount init SQL files
      - mysql-data:/var/lib/mysql

  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin:latest
    networks:
      - msexample
    environment:
      - PMA_HOST=mysql
      - PMA_USER=root
      - PMA_PASSWORD=rootpassword
    ports:
      - "8080:80"

networks:
  msexample:
    driver: bridge

volumes:
  mysql-data:
